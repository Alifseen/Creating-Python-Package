when we use pip we basically access it from Pypi
We will create a package for Module 2 Excel to PDF Generator

A library can be a package (externally installed, multiple files) or a module (local, usually 1 file)

For a code to become a package it must be written in OOP or functional programming principles because users who import it will look for functions or classes

rename main.py to more meaningful name based on what it does

def generate()

allow defining path for excel and storing pdfs and image
def generate(excel_input_path, pdf_output_path, image_output_path)

replace all excel paths with excel input path argument
replace all image paths with image output path argument
replace all pdf paths with pdf output path argument. use os.makedirs(pdf_output_path) in "if not os.path.exists(pdf_output_path)" to make sure the path exists or is created

They should also be able to define column names
def generate(excel_input_path, pdf_output_path, image_output_path, column names seperated by comma)

be sure to assign these variables to where ever they are hard coded in the code.

Note: We can use kwargs for defining column names, because the user may have less or more columns

Add a docstring to describe how the function operates





to test, create another python file and import the invoice module then use invoice.generate

if the testing is successful, convert it to package
Package is usually a directory with multiple modules files, so in our case it can be excel to pdf and excel to html and excel to png. the directory should also have a __init__.py file





create a setup.py in the same directory as invoicing package folder
It specifies the parameters of the package

from setuptools import setup

setup(
name (make sure there is no oother package with that name)
packages (this takes a list of direcotires in case there are multiple packages. Also, you can use this name with "import" command)
version
license = MIT (free llicense)
description
author
authoer_email
url
keywords  (this is a list of keywords that can be used to search for this package)
install_requires (list of libraries this package depends on)
classifiers (list of metadata)
)

Create Dist
Go to terminal and type python setup.py sdist
This will create a distribution package that will be uploaded to Pypi (python package index)

Upload
pip install twine
then run this command twine upload --skip-existing dist/*
This means upload everything except existing from the folder dist
You will be prompted to enter your user credentials for Pypi


Changing Packages
If you want to change code, you have to upload again. But first change the version number in setup.py file and recreate the distribution.
Version convention for 1.0.0 is 1.0.1 for a bug fix, 1.1.0 for minor changes, 2.0.0 for major change
upload again using the same twine commnad
